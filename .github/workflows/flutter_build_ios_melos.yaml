name: Build & Deploy iOS (melos)
on:
  workflow_call:
    inputs:
      app-dir:
        required: true
        type: string
      app-path:
        required: true
        type: string
      environment: # options development|staging|production
        required: true
        type: string
      flutter-version:
        required: false
        type: string
      pre-build-script:
        required: false
        type: string

    secrets:
      ios_provisioning_profile_password:
        required: true
      ios_provisioning_profile_asc:
        required: true
      ios_certificate_asc:
        required: true
      ios_certificate_password:
        required: true
      app_store_api_private_key:
        required: true
      app_store_issuer_id:
        required: true
      app_store_api_key_id:
        required: true
      p12_password:
        required: true

jobs:
  build:
    runs-on: macos-latest
    steps:
      # Checkout the current GitHub repository.
      - name: Checkout GitHub repository on build agent
        uses: actions/checkout@v2

      # Pre-build script
      - name: Runing pre-build script
        if: ${{ inputs.pre-build-script != '' }}
        run: ${{ inputs.pre-build-script }}

      # Install Flutter (latest stable) if flutter-version is not specified.
      - name: Install Flutter (latest stable)
        if: ${{ inputs.flutter-version == '' }}
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      # Install Flutter (${{inputs.flutter-version}} stable) if flutter-version is specified.
      - name: Install Flutter (${{inputs.flutter-version}} stable)
        if: ${{ inputs.flutter-version != '' }}
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{inputs.flutter-version}}

      # Install the Melos Dart package.
      - name: Install melos
        run: flutter pub global activate melos

      # Bootstrap Melos and download Flutter dependencies required by the project.
      - name: Install Dependencies
        run: melos bootstrap && melos get
        working-directory: ${{ inputs.app-dir }}

      # Validate if the source code is formatted according to the Dart style guide (https://github.com/dart-lang/dart_style/wiki/Formatting-Rules).
      - name: Format
        run: melos format:set_exit_if_changed
        working-directory: ${{ inputs.app-dir }}

      # Validate the source code against the configured linting rules (see `analysis_options.yaml`).
      - name: Analyze
        run: melos analyze
        working-directory: ${{ inputs.app-dir }}

      # Runs all unit-tests that are part of the Flutter project.
      - name: Run tests
        run: melos test
        working-directory: ${{ inputs.app-dir }}

      # Install the Apple signing certificate and provisioning profiles on the build agent.
      - name: Install the Apple certificate and provisioning profile
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/distribution.p12
          PP_PATH=$RUNNER_TEMP/provisioningprofile.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          RANDOM_KEYCHAIN_PASSWORD="$(openssl rand -hex 100)"

          # decrypt the provisioning profile and signing certificate
          echo "${{ secrets.ios_provisioning_profile_asc }}" > provisioningprofile.mobileprovision.asc
          gpg -d --passphrase "${{ secrets.ios_provisioning_profile_password }}" --batch provisioningprofile.mobileprovision.asc > $PP_PATH
          echo "${{ secrets.ios_certificate_asc }}" > distribution.p12.asc
          gpg -d --passphrase "${{ secrets.ios_certificate_password }}" --batch distribution.p12.asc > $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p $RANDOM_KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p $RANDOM_KEYCHAIN_PASSWORD $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P ${{ secrets.p12_password }} -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      # Build a production release of the Flutter project.
      - name: Build iOS production release
        run: melos build:ios:runner
        env:
          ENVIRONMENT: ${{ inputs.environment }}
      
      # Upload the production release to the Apple Store and make it available in TestFlight.
      - name: 'Upload app to TestFlight'
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: ${{ inputs.app-dir }}/${{ inputs.app-path }}
          issuer-id: ${{ secrets.app_store_issuer_id }}
          api-key-id: ${{ secrets.app_store_api_key_id }}
          api-private-key: ${{ secrets.app_store_api_private_key }}
      
      # Ensure the installed secrets and certificates are removed from the build agent.
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/provisioningprofile.mobileprovision
